text_start = '''
Для работы мне нужен файл формата excel, можете отправить.
\nТак же на обработку файла может занять несколько минут
'''

text_send_xlsx = 'Пожалуйста, отправьте Excel-файл (.xlsx или .xls).'

text_need_group_by = 'Требуется ли сгруппировать данные в полученном файле?'

text_error = 'Произошла ошибка, нажмите или напишите /start'


def text_enter_name_column(columns: str, num: int) -> str:
    if num == 1:
        return f'Введите название первый колонки, список колонок:\n\n{columns}'

    return f'Введите название второй колонки, список колонок:\n\n{columns}'


text_help_work_groupby = '''
    Как работает группировка:

1) Нужно ввести название первый колонки, это колонка, по значениям которой будут 
сформированы группы (например, "Регион", "Категория", "Дата").

2) Нужно ввести название второй колонки, это колонка, значения которой будут 
агрегироваться внутри каждой группы (например, "Продажи", "Количество", "Цена").

3) Нужно выбрать операцию агрегации, которая будет обрабатывать значения:
Сумма: для подсчёта общей суммы значений в каждой группе;
Среднее: для расчёта среднего значения;
Количество: для подсчёта числа записей в группе.
'''

text_create_graphic = 'Хорошо, создаём график. Внизу кнопки типов графиков'

text_error = 'Произошла ошибка, нажмите или напишите /start'


def text_error_enter_column_name(columns: str) -> str:
    return f'Вы указали несуществующие поля.\nПожалуйста, введите повторно c первого поля:\n\n{columns}'


text_save_result_groupby = '''
Нажав "Да", вы удалите отправленный Excel-файл и сохраните группировку.
\nНажав "Нет", файл останется, но группировка не будет сохранена.
'''


def get_column_name_for_axis(axis: str, columns: str) -> str:
    if axis == 'x':
        return f'Пожалуйста, введите имя столбца, который будет отображён по оси X, список колонок:\n\n{columns}'

    return f'Пожалуйста, введите имя столбца, который будет отображён по оси У, список колонок:\n\n{columns}'


def get_axis_name(axis: str) -> str:
    if axis == 'x':
        return 'Введите подпись для оси x'

    return 'Введите подпись для оси y'


text_color_options = '''
Выберете цвет для графика.
1) Красный
2) Синей
3) Небесно-голубой
'''


def show_settings_graphic(data: dict):
    text = f'''
Заголовок: {data.get('title') if not None else '-'}.
Тип графика: {data.get('type_graphic') if not None else '-'}.
Оси-x: {data.get('x') if not None else '-'}.
Оси-y: {data.get('y') if not None else '-'}.
Подпись для оси-x: {data.get('x_label') if not None else '-'}.
Подпись для оси-y: {data.get('y_label') if not None else '-'}.
Цвета графика: {data.get('color') if not None else '-'}.
    '''
    return text

